<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>珵玉</title>
    <description>谦谦君子,温润如玉</description>
    <link>http://localhost:4000/Outside-man.github.io/</link>
    <atom:link href="http://localhost:4000/Outside-man.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 05 Aug 2018 02:02:06 +0800</pubDate>
    <lastBuildDate>Sun, 05 Aug 2018 02:02:06 +0800</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>阿里入职</title>
        <description>&lt;p&gt;第一次入职，颇有紧张，按要求准备了入职材料，深怕遗漏。&lt;br /&gt;
最头疼的还是想花名，之前参加完D2的时候，暗自给自己取了花名，语海，但是输入时，系统表示已经注册了。阿里的花名文化还是很有意思的，最终想了以下版本&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;珵玉 珵璞 璞玉&lt;br /&gt;
主要还是想着玉形容男性，既可以表达君子品德，也可以通过玉来表示自己涉世未深，待人雕琢。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在昨天确定是&lt;strong&gt;珵璞&lt;/strong&gt;，珵代表美玉，我的品德比较温润。璞代表璞玉，我的能力待提升。不过在入职清早，反复推敲，最终觉得&lt;strong&gt;珵璞&lt;/strong&gt;太不顺嘴了，然后匆匆给老大发消息留言，请求把我的花名申请毙了（花名一旦申请，除非主管驳回，不然最终就会落下去了），老大应该也是没见过这么纠结的孩子吧。&lt;br /&gt;
于是乎，最终我的花名确定为 &lt;strong&gt;珵玉&lt;/strong&gt; ，感觉看起来工整好看，读起来又比较顺口，so nice。顺便博客的名字也从语海改成了珵玉~~&lt;/p&gt;

&lt;p&gt;迈入蚂蚁园区，有种朝圣的感觉（D2 之后我就把阿里当做我的朝圣地了），想到以后能在这里工作，我内心说不出的激动。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;前台妹子是真滴好看！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;接待到新人培训班，内容主要是签一些实习生协议等文件，然后简单的对阿里文化有个认识，什么是六脉神剑，诚信第一。还再三强调了数据安全的高压线。最后下午讲了在园区的吃住行方面。&lt;/p&gt;

&lt;p&gt;4点多我就来到工作组，当时老大还不在，我就被老大的老大安排了个位置，老大来了之后带我认识了一圈师兄们（有一个且仅仅只有一个师姐）。&lt;/p&gt;

&lt;p&gt;本来跟家里说好，入职办好手续应该就能很快回家的。但是我安装好电脑之后，就被内网上丰富的文档吸引了，丰富而完整的文档，当天我就看到了晚上9点多，感觉就一个&lt;strong&gt;“爽到！”&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;入职阿里第一天，也是我第一次工作，难忘。&lt;br /&gt;
&lt;img src=&quot;/img/in-post/2018/Entry-Alibaba/good_night_ant.jpg&quot; alt=&quot;good night ant&quot; /&gt;&lt;/p&gt;
&lt;center&gt;晚安，蚂蚁&lt;/center&gt;
</description>
        <pubDate>Fri, 25 May 2018 06:00:00 +0800</pubDate>
        <link>http://localhost:4000/Outside-man.github.io/2018/05/25/entry-Alibaba/</link>
        <guid isPermaLink="true">http://localhost:4000/Outside-man.github.io/2018/05/25/entry-Alibaba/</guid>
        
        <category>生活</category>
        
        <category>工作</category>
        
        
      </item>
    
      <item>
        <title>实习春招回顾</title>
        <description>&lt;p&gt;总共在阿里电面5轮，4轮天猫，1轮1688.最终在5月16日收到了阿里口碑的offer，我也是一脸有点蒙蔽的。不过在一脸懵逼中，我也算是结束了我2018春招之旅。&lt;/p&gt;

&lt;p&gt;这段时间总共去过阿里，网易，恒生，酷家乐共四家公司面试。面试过程中有被面试官虐过，也有收到面试官的肯定，种种都是我这一次春招的收获&lt;/p&gt;

&lt;p&gt;简单回顾下面试经历吧。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;恒生面试1轮秒跪&quot;&gt;恒生面试（1轮，秒跪）&lt;/h3&gt;
&lt;p&gt;这是第一次参与面试，上来是一大教室的人进行笔试，笔试内容很基础，但是确实没做好准备。尤其是在笔试卷子上有大段复杂的sql语句编写，在我平时已经依赖框架，而且习惯把业务写在代码而不是sql执行中的，这一次笔试确实让暴露了不足。不过还好时间比较早，春招才刚刚开始，我还有时间去梳理下知识点。&lt;/p&gt;

&lt;h3 id=&quot;阿里面试5轮口碑offer&quot;&gt;阿里面试（5轮，口碑offer）&lt;/h3&gt;
&lt;p&gt;阿里的面试总共经历5轮电面，让人感觉稳重，无论是面试质量还是面试流程都体现出只有是大技术公司才会有的成熟与稳健。&lt;br /&gt;
多轮次的考核能很清楚地探出被面试的人知识的深度和广度，面的是java开发岗，考察面有 &lt;strong&gt;基础java知识、数据结构、算法、项目经历等等&lt;/strong&gt;。整场几轮面下来，也会让被面试人对自身有很深刻的体会。&lt;br /&gt;
所有很建议在技术上找不到方法的同学，能去阿里体验下面试，即使拿不到offer也是会让人对自己有很好的认识。&lt;/p&gt;

&lt;h3 id=&quot;网易面试3轮考拉被拒&quot;&gt;网易面试（3轮，考拉被拒）&lt;/h3&gt;
&lt;p&gt;网易是到现场面试，是穿插在阿里面试时间中间。现场先面两轮，根据前两轮结果参与第三轮hr面，结果是在面试后14天内反馈。不过面试都一样，挂了不会主动通知，只会在录取的时候主动通知，挂了具体要过很久才能在招聘官网查到。&lt;br /&gt;
第一轮面试时我第一次现场面试，紧张的一笔。说到项目经历，里面说到用过websocket，面试官就抓着我问了不了解websocket底层是怎么实现，卡壳很久。最好讲了点tcp三次握手（面试官尴尬的表情印象深刻）。不过问到java并发相关还是基本能答出来的。&lt;br /&gt;
第二轮面试主要还是问java相关知识，内存模型，并发相关。可能面试官想问深，但是我答的都比较浅，不过还是能顺利到达第三轮hr。hr没什么太大亮点，都一样的，不细说。&lt;/p&gt;

&lt;h3 id=&quot;酷家乐面试3轮offer&quot;&gt;酷家乐面试（3轮，offer）&lt;/h3&gt;
&lt;p&gt;酷家乐是在拿到阿里offer之前面的，也是现场面。&lt;br /&gt;
酷家乐第一轮是上机写代码，比较简单，是一个处理时间转换成指定模板。当时为了速度写的比较挫，不过写完才发现居然给了一小时，我就慢慢看了会 calender 类是怎么实现，顺便写了个单测，比较两个方法，性能差距不是很大。&lt;br /&gt;
第二轮是算法面试，问了2个水题，1道简单dp，过程中确实很久没搞dp，转移方程想了比较久，基本面试20分钟内搞定了。&lt;br /&gt;
第三轮是工程抽象面试，一个cd店，对不同用户提供不同cd（比如不能给孩子提供成人cd之类），对不同用户还有不同优惠，让我简单描述下怎么抽象，未来怎么能拓展这样的。当时讲了一点设计模式的东西，收到面试官肯定。&lt;br /&gt;
整场下来，酷家乐面试很顺利，之前的所有准备，在这一次全部展现，获得了面试官的肯定。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;接下来要办理阿里的入职手续了，春招顺利结束。拿到实习offer，接下来要在暑假好好实习，快速成长。&lt;/p&gt;

</description>
        <pubDate>Thu, 17 May 2018 06:00:00 +0800</pubDate>
        <link>http://localhost:4000/Outside-man.github.io/2018/05/17/interview-review/</link>
        <guid isPermaLink="true">http://localhost:4000/Outside-man.github.io/2018/05/17/interview-review/</guid>
        
        <category>生活</category>
        
        <category>工作</category>
        
        
      </item>
    
      <item>
        <title>阿里校招 二面面经</title>
        <description>&lt;p&gt;在经历完一面，一轮在线编程，就等着二面了。当我已经躺在床上准备刷刷知乎就打算睡觉的时候，突然一个陌生电话打来，这个应该就是阿里二面的电话，瞬间坐起跑到阳台接起电话。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;正式面试二面&quot;&gt;正式面试二面&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;简单自我介绍下吧&lt;/strong&gt;&lt;br /&gt;
这个跟一面讲的差不多，大致讲了一下自己的技术栈，讲了一些关于自己所在的学校的工作室的相关事情。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Java8 的新特性&lt;/strong&gt;&lt;br /&gt;
这里是面试的小哥哥问我平时开发用什么版本的jdk，然后我说是使用java8，面试官就直接问我java8特性了。我当时只答了一个lambda表达式，就是箭头函数，匿名类可以通过lambda表达式来实现。然后还有twr（try-with-resources），可以通过声明资源的try语句块，可以确保在程序结束的时候资源会被关闭。
    &lt;blockquote&gt;
      &lt;p&gt;twr后来查证是Java7的新特性。&lt;br /&gt;
&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html&quot;&gt;【Java8的新特性】&lt;/a&gt; 
&lt;a href=&quot;https://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6&quot;&gt;【Java9的新特性】&lt;/a&gt; 
&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/10-relnotes-4108314.html&quot;&gt;【Java10的新特性】&lt;/a&gt;&lt;br /&gt;
Java8的主要几个新特性是Lambda表达式、方法引用、Stream API、Date Time API等等。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;你之前写的项目里面有遇到什么挑战吗&lt;/strong&gt;&lt;br /&gt;
公众号后台写爬虫获取学生成绩，假期的时候出现较大的并发访问，大家都在查成绩。这个时候我就是通过后台启动多个线程不间断通过绑定的学生账号去获取成绩，更新到Redis数据库里。同学查成绩的时候就是直接从redis中取获取，就能抗下压力。取代了之前直接一个请求就去查询一次的方式。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;跨域问题是怎么解决的&lt;/strong&gt;  &lt;br /&gt;
因为之前说到自己在搭了一个简单的前后端分离的玩具项目，面试官就问了跨域的解决方法。之前用过JSONP，不过这个方法只能允GET请求，还有就是在controller里面手动给请求加头。后来我使用Springboot框架之后，里面有一个@CrossOrigin的注解，可以运行所有跨域访问，也可以单独指定服务器。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HTTP协议了解过吗？HTTP1.0 2.0的区别&lt;/strong&gt;&lt;br /&gt;
不好意思，这块没有了解过。
    &lt;blockquote&gt;
      &lt;p&gt;这块我是真的没学过，惭愧惭愧，等学了之后会补坑。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SpringMVC与SpringBoot的区别&lt;/strong&gt;&lt;br /&gt;
Springboot相较SpringMVC配置更加简单，支持通过注解的形式来创建Bean和配置。Springboot内置了Tomcat可以直接打包成jar之后指定好端口就可以直接运行，省去配置Tomcat的过程。
    &lt;blockquote&gt;
      &lt;p&gt;答得比较浅，都是我使用过程中的直观感受。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GET和POST的区别&lt;/strong&gt;
这块我是从之前前后端分离的时候Restful的接口规范上答的，post是添加新建的api请求，get往往是获取指定资源的请求。get会显示的将参数显示在url里，然后因为浏览器的问题，get的url长度有限，意味着参数长度有限。
    &lt;blockquote&gt;

      &lt;table&gt;
        &lt;thead&gt;
          &lt;tr&gt;
            &lt;th&gt;请求方法&lt;/th&gt;
            &lt;th&gt;GET&lt;/th&gt;
            &lt;th&gt;POST&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;后退/刷新&lt;/td&gt;
            &lt;td&gt;无害数据会被重新提交&lt;/td&gt;
            &lt;td&gt; &lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;书签&lt;/td&gt;
            &lt;td&gt;可收藏为书签&lt;/td&gt;
            &lt;td&gt;不可收藏为书签&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;缓存&lt;/td&gt;
            &lt;td&gt;能被缓存&lt;/td&gt;
            &lt;td&gt;不能缓存&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;编码类型&lt;/td&gt;
            &lt;td&gt;application/x-www-form-urlencoded&lt;/td&gt;
            &lt;td&gt;application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;历史&lt;/td&gt;
            &lt;td&gt;参数保留在浏览器历史中。&lt;/td&gt;
            &lt;td&gt;参数不会保存在浏览器历史中。&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;数据长度的限制&lt;/td&gt;
            &lt;td&gt;GET方法向URL添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。&lt;/td&gt;
            &lt;td&gt;无限制。&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;数据类型的限制&lt;/td&gt;
            &lt;td&gt;只允许 ASCII 字符。&lt;/td&gt;
            &lt;td&gt;没有限制。也允许二进制数据。&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;安全性&lt;/td&gt;
            &lt;td&gt;与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。&lt;/td&gt;
            &lt;td&gt;POST 比 GET 更安全,因为参数不会被保存在浏览器历史或 web 服务器日志中。&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;可见性&lt;/td&gt;
            &lt;td&gt;数据在 URL 中对所有人都是可见的。&lt;/td&gt;
            &lt;td&gt;数据不会显示在 URL 中。&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;

      &lt;p&gt;&lt;a href=&quot;http://www.w3school.com.cn/tags/html_ref_httpmethods.asp&quot;&gt;GET 对比 POST&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;volatile关键字用过吗&lt;/strong&gt;&lt;br /&gt;
volatile变量是对线程可见的，因为在原有的机制中，在主存的变量在线程中使用时会建立线程的变量副本，这个时候就可能会出现数据不统一的问题。volatile变量在被改变时会通知到各个线程，每个线程要使用的时候都会从主存中再次读取数据。而且volatile没有加锁，所以这是个比较轻量的同步机制。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;乐观锁和悲观锁&lt;/strong&gt;&lt;br /&gt;
乐观锁和悲观锁在我的理解中是一种思想，悲观锁是认为我在并发时往往会发生问题，所以需要对整段数据进行加锁。而乐观锁就是持乐观态度，认为并发不会出错，他的并发控制不使用锁，而是通过类似于版本号的方式来同步，出现写数据时候，就将要写的和已有的数据版本进行比较然后交换。CAS也是乐观锁的实现方法，涉及内存值、预期值、新值，只有内存制和预期值相等，即我在我修改的之前没有线程修改过，我才可以将新值写入，但是这可能会出现ABA问题，而版本号可以解决ABA问题。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ABA问题说明下&lt;/strong&gt;&lt;br /&gt;
就是刚才CAS方法，因为在我比较预期值和内存值得时候可能出现问题，内存值是A，预期值是A，但是内存其实经历了A变成B,B又变成A的过程，但是在宏观上看不出问题，但是实际上已经有数据变动。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;String、StringBuffer、StringBuilder区别&lt;/strong&gt;&lt;br /&gt;
String是常量，创建之后就不可变。StringBuffer、StringBuilder通过缓冲区可以变化，而Builder线程不安全，但修改速度最快，Buffer线程安全，但性能差于Builder。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数据库怎么插入数据后立马返回自增的id&lt;/strong&gt;&lt;br /&gt;
我框架上用的JPA，JPA中有SAVE方法，插入新的数据后会返回实体对象，里面可以直接通过getId获取id。
    &lt;blockquote&gt;
      &lt;p&gt;然后要求我原生sql语句一句实现插入返回id，并没有回答出来。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;怎么去学习新技术的&lt;/strong&gt;&lt;br /&gt;
平时看工作室成员的博客，每周技术分享会。最近一周学习了api如何防止重放攻击，通过在请求中带上随机数和时间戳来实现。在最近的分享会上给学弟学妹分享数据库优化心得。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;整场面试下来，相较于一面略微感觉到难度有点提升，也是很多原理性的东西没学到精髓，有的时候有点依赖于框架。不过也算是顺利通过了，接下来就是三面技术面了，如果顺利的话应该就是最后一场技术面了，继续加油！&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Apr 2018 06:00:00 +0800</pubDate>
        <link>http://localhost:4000/Outside-man.github.io/2018/04/04/Alibaba-interview-2/</link>
        <guid isPermaLink="true">http://localhost:4000/Outside-man.github.io/2018/04/04/Alibaba-interview-2/</guid>
        
        <category>生活</category>
        
        <category>技术</category>
        
        
      </item>
    
      <item>
        <title>阿里校招 一面面经</title>
        <description>&lt;p&gt;2月26号提交阿里校招实习简历，进度一直在面试中，一度认为自己已经凉了。然而时隔整整一个月，在3月26日终于接到阿里电面通知了，又兴奋又紧张，约在了28号晚上面试。&lt;/p&gt;

&lt;p&gt;临近约定的时间，一直想着自己有没有什么没复习到位的，如果真的考得很深的spring源码，jvm之类的就只能GG了，应该考得是比较基础的东西。&lt;/p&gt;
&lt;h3 id=&quot;小插曲&quot;&gt;小插曲&lt;/h3&gt;
&lt;p&gt;之前也有个阿里电话，具体什么部门不记得了，他说实在人才库里看到我的简历的，（阿里校招是一个系统的，如果报了任何一个部门，在这一轮校招结束前是不能再报其他部门的）希望和我聊一聊前端。当时我一脸懵逼，我记得我投的是后端java开发呀，然后就是问我。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;什么是闭包？&lt;/strong&gt;&lt;br /&gt;
我就说，函数外部无法调用的函数内部的变量，但可以在函数里面再构造一个内部函数可以把这个内部函数返回出去，因为内部的函数可以访问函数的变量。
讲的比较乱，可能面试官听的不下去了就不追问了，这里应该要讲作用域之类的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;js的继承怎么实现？&lt;/strong&gt;&lt;br /&gt;
我当时就蒙了，之前是在看js红宝书的时候里面有讲到原型链之类的，回答的不是很好 支支吾吾的，然后ES6的继承语法和java的继承有点像。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;js是面向对象的，那面向对象有哪些特征？&lt;/strong&gt;&lt;br /&gt;
因为前面题目回答的不是很好，所以不在状态，说了封装，继承，多态当时没有说出来，让面试官提示了下。
然后面试就结束了，他跟我说这个面试对接下来面试没有影响，校招考的都会比较基础，让我好好准备。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在我紧绷的神经快要松下来的时候，电话终于打来了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;正式面试一面&quot;&gt;正式面试一面&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;简单自我介绍下吧&lt;/strong&gt;&lt;br /&gt;
自报家门之后，分成两个部分介绍我自己，第一部分是校园经历，大二担任过一年学生会主席，组织举办过一些大型活动。第二部分是技术方面，从学生会出来之后就一直在玩技术，大一参加过ACM，大三现在是学校一个老牌工作室成员。我们工作室是在学校里面玩技术，承接一些学校的项目，之前有给学校做个官网前端，现在主要是维护公众号后台，给学生会做了个OA系统，基本每周有一个技术分享会。其他竞赛获奖比较弱，参加过ACM的一个亚太比赛没拿过奖，省赛外包拿个本科三等。
    &lt;blockquote&gt;
      &lt;p&gt;校园经历那部分没有展开讲，是因为我觉得面向技术岗的话，这块比重不是很重要，技术那块重点讲了，但是后面有点偏向于介绍工作室了。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;你说你玩技术，你是怎么玩的？&lt;/strong&gt;&lt;br /&gt;
这块还是主要讲了工作室的一些东西，说到通过分享会去分享技术，学习技术这样的。说到我现在能给工作室成员和新生讲一些后端的技能，然后还讲到现在第七届成员中有专门玩网络安全的，也在分享安全技能的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;你们最近一次分享的主题是什么？&lt;/strong&gt;&lt;br /&gt;
最近一次是我给大一成员讲解springboot的配置使用，然后还有另一个专攻前端的成员讲解ES6相关的东西。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;你对springboot是怎么理解的？&lt;/strong&gt;&lt;br /&gt;
在我看来springboot他是微服务框架，有个最亮眼的特点是他内置了一个tomcat，这样就便于我们部署服务，服务器上可以不用配置tomcat服务，只需要关注mysql，java，redis的环境。然后我在看springboot往后还有springcloud的分布式框架，而分布式我也是这学期刚刚开始看的，由于我们学校的项目基本用不到分布式，所以我也只能自己弄个玩具项目这样的。
    &lt;blockquote&gt;
      &lt;p&gt;这里我给自己挖了个坑，分布式我是真的刚刚开始上手学，面试准备一点都没有，接下来面试就分布式可能会存在失分点吧。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;你对分布式是怎么理解的？你了解分布式的哪些东西？&lt;/strong&gt;&lt;br /&gt;
就对于springcloud的理解，首先它有个服务中心，我的所有微服务都可以被服务中心发现，我可以把微服务注册进去。他可以集成负载均衡，消息队列的一系列框架。&lt;br /&gt;
这里被打断，我理解错问题了。重复了一下问题意思&lt;strong&gt;“为什么会有分布式系统,设计分布式的原则是什么？”&lt;/strong&gt;&lt;br /&gt;
关于分布式的话，我认为分布式出现主要是为了解决两类问题。&lt;br /&gt;
1.对于同一种服务，由于请求十分频繁，导致我服务器性能上吃不消。所以需要把相同服务部署到不同的服务器上，通过一台主服务器接受请求，然后将请求均衡转发到分布的主机上。通过这种方式将服务器联合起来，来应对高并发和大访问量。&lt;br /&gt;
2.还有就是将一个系统的服务进行拆解，将这些服务分别放到不同的服务器，通过主服务器将这些服务进行串联起来，将服务模块化，便于维护。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;分布式涉及到修改数据，会出现什么问题，怎么解决？&lt;/strong&gt;&lt;br /&gt;
我理解中涉及到数据修改，可能会出现数据脏读幻读的情况。解决方案在面试官的提醒下讲出了在主服务器上建立redis来解决数据一致性的问题。
    &lt;blockquote&gt;
      &lt;p&gt;一开始我是没有想到解决方案的，然后我为了扳回这方面，我主动聊了分布式的单点登录，通过redis给登陆的用户返回token，用户去不同服务器请求的时候就带着token来验证身份。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;分布式主服务器宕掉怎么解决？&lt;/strong&gt;&lt;br /&gt;
这里没有让我回答，只是提出来这些问题，让我可以之后去了解，包括分布式的原则，可用性，一致性，分区容忍性等。在设计的时候是都需要考虑，还是有所侧重，可以再继续深入的学习下。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tomcat有没有更深入的理解？&lt;/strong&gt;&lt;br /&gt;
这个块我没有深入的学习过，只是把它当做一个承载服务的容器，他里面配置可能有请求队列长度，因为之前写项目的时候在较高并发的时候会出现请求没反应，这里后来我是在Tomcat配置文件里修改了请求队列长度。
    &lt;blockquote&gt;
      &lt;p&gt;回头可以去了解下Tomcat是怎么处理这些请求的。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Java为什么有泛型，为了解决什么问题？&lt;/strong&gt;&lt;br /&gt;
这个我觉得是为了减少代码的重复量。
    &lt;blockquote&gt;
      &lt;p&gt;泛型方面更深入的我没有答出来，泛型里的擦除这些概念没有了解。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HashMap和HashTable有什么区别？&lt;/strong&gt;&lt;br /&gt;
HashTable线程安全，HashMap不是线程安全。如果需要HashMap线程安全需要去它的一个工具类里调用方法，将非线程安全转换为线程安全。但是线程安全的同步会导致性能上受影响。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HashMap的数据结构是怎么样的？&lt;/strong&gt;&lt;br /&gt;
Map的底层是红黑树，红黑树具体的我也说不出来，它hash解决冲突的办法是拉链法，它是通过list来实现的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;在使用HashMap的时候用自定义的对象去作为key有什么注意事项？&lt;/strong&gt;&lt;br /&gt;
这个对象需要重写它的hashCode和equal&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;你对线程安全的理解&lt;/strong&gt;&lt;br /&gt;
一个方法可能有多个线程去同时执行，这个时候不通过加锁或者说同步的方法就会导致数据方面的问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;线程同步有几种方式？&lt;/strong&gt;&lt;br /&gt;
最常见的是通过synchronized关键字，加在方法上。还有就是通过加锁来实现同步。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;你对线程池的理解&lt;/strong&gt;&lt;br /&gt;
若是不断的新建线程势必导致消耗增加，就可以通过将线程池化，先预先创建好线程放入线程池，这时候有需要线程的时候，只需要从线程池中调出一个线程，就不用通过新建，使用完了再放回线程池。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;构造线程池有哪些方法？&lt;/strong&gt;&lt;br /&gt;
通过ExecutorService可以建立出可缓存线程池，定长线程池（超出的线程会在队列中等待）。定时及周期性任务执行的线程池，单线程化的线程池。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ClassLoader的概念，加载一个类的过程&lt;/strong&gt;&lt;br /&gt;
加载一个类的时候 先加载父类中的静态对象、静态代码块、非静态代码块，然后再加载子类中的静态对象、静态代码块、非静态代码块。ClassLoader有哪几种这个我没具体答上来，只说了个最常见的连接数据库的时候需要加载jdbc，当时用了Driver来加载mysql的jdbc。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;数据库sql调优的方式&lt;/strong&gt;&lt;br /&gt;
sql分表，语句优化，对于常用的数据进行建立索引，建立视图这些方法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;悲观锁和乐观锁的概念&lt;/strong&gt;&lt;br /&gt;
悲观锁是方法执行的时候会认为自己总是会遇到多线程问题，乐观锁就是认为自己不会遇到数据问题。
    &lt;blockquote&gt;
      &lt;p&gt;这里我完全记不清概念了，凭着印象扯了点。之后面试前要好好补一补锁的东西。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;如何实现乐观锁？&lt;/strong&gt;&lt;br /&gt;
通过轻量锁来实现乐观锁，具体实现将不出来，面试官提示我，但是我依旧没有答出来。
    &lt;blockquote&gt;
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/truelove12358/article/details/54963791&quot;&gt;补课链接&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Spring怎么理解的？&lt;/strong&gt;&lt;br /&gt;
Spring最常说的就是实现了IOC，控制反转和依赖注入。就是将构建对象的工作交给了容器，开发的时候可以通过xml配置，java配置，注解配置来解决。同时Spring做到了集合了很多常用的框架，对框架支持度很高。
    &lt;blockquote&gt;
      &lt;p&gt;这里答得太浅了，应该是存在了扣分项&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AOP怎么实现的？&lt;/strong&gt;&lt;br /&gt;
这里也是只说明了自己会用aop，具体实现没有讲出来。
    &lt;blockquote&gt;
      &lt;p&gt;AOP实现之前是有看过的，当时实在是想不起来了。&lt;br /&gt;
&lt;a href=&quot;http://www.importnew.com/24305.html&quot;&gt;补课链接&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;你平时是怎么学习技术的？&lt;/strong&gt;&lt;br /&gt;
1.遇到问题，解决问题，在解决问题中学习。&lt;br /&gt;
2.工作室日常分享会，看前辈们的博客学习。&lt;br /&gt;
3.买一些书看，主动提升一下。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;基本上我记得题目就这些了，面试流程下来还行，一面算是通过了。&lt;br /&gt;
评价结果：&lt;br /&gt;
技术广度基本够了，深度有所欠缺；&lt;br /&gt;
交谈方面，思路逻辑清晰，但是话题容易跑偏，可能会给人啰嗦的感觉；&lt;/p&gt;

&lt;p&gt;总的要求我再对之前没有回答出的问题好好准备准备，然后就是准备好在线编程测试。&lt;/p&gt;

&lt;p&gt;最后希望我能入阿里吧。&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Mar 2018 05:00:00 +0800</pubDate>
        <link>http://localhost:4000/Outside-man.github.io/2018/03/29/Alibaba-interview-1/</link>
        <guid isPermaLink="true">http://localhost:4000/Outside-man.github.io/2018/03/29/Alibaba-interview-1/</guid>
        
        <category>生活</category>
        
        <category>技术</category>
        
        
      </item>
    
      <item>
        <title>docker小记</title>
        <description>&lt;p&gt;因为之前有用过docker，但是每次要配置docker容器的时候，又会忘了常用指令，这篇博文打算好好记录下docker的使用。&lt;/p&gt;

&lt;p&gt;首先先介绍下docker，在我的理解中docker是一个容器，我们开发的应用、依赖和环境都可以打包部署到docker中，然后docker进行打包，之后这个包就可以直接部署到任意一台拥有docker服务的机器上。&lt;br /&gt;
这为我们解决了环境和依赖的问题，之前开发中遇到的问题&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;-这个应用装到生成环境之后咋报错了呢&lt;br /&gt;
  -不可能，我开发环境完全ojbk啊&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;-我感觉我需要的环境依赖都配置好，怎么这个demo还是跑不起了呢&lt;br /&gt;
  -你的xxx是不是没装，你的xxx是不是没配好&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上这些问题都会因为docker的存在而解决了，因为配置所需要的环境和依赖都随着应有一起打包了。&lt;/p&gt;

&lt;p&gt;docker中的容器与镜像的概念，他们的关系类似于对象和类，容器通过镜像生成，我们运行的是容器，打包出来的是镜像文件。这两个概念会穿插在整个docker中。&lt;/p&gt;

&lt;p&gt;安装docker就不多说了，直接开始常用指令。&lt;/p&gt;
&lt;h6 id=&quot;镜像images&quot;&gt;镜像(images)&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$docker images #列出所有镜像
# -q 静默模式展示(只列出imageId)

$docker run [参数] [image] [command] #创建并运行容器
# -d 以守护进程方式运行（后台）
# -i 以交互模式运行容器，通常与 -t 同时使用
# -t 为容器重新分配一个伪输入终端，通常与 -i 同时使用
# -P 将容器内部端口随机映射到主机的高端口
# -p 将容器内部端口绑定到指定的主机端口
# -v [主机路径]:[镜像路径] 将主机目录挂载到镜像中
# --name 给容器命名
# --restart=[always | on-failure(:n)] #自动重启，错误重启(可以指定次数)

$docker search [image] #在线搜索可下载镜像

$docker pull [image] #下载镜像

$docker tag [imageId] [new REPOSITORY name]:[new TAG] #设置镜像标签

$docker rmi [imageId] #删除镜像
# -f 强制删除
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.runoob.com/docker/docker-run-command.html&quot;&gt;docker run 更多信息&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;容器contain&quot;&gt;容器(contain)&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$docker ps #列出正在运行的容器
# -a 列出所有容器包括已停止的
# -q 静默模式展示(只列出containId)

$docker port [contain] [port] #查看容器端口映射到主机端口的情况

$docker logs [contain] #可以查看容器内部的标准输出

$docker stop [contain] #停止容器

$docker start [contain] #运行容器

$docker restart [contain] #重启容器

$docker rm [contain] #删除容器(不能删除正在运行的容器)
#docker kill $(docker ps -a -q) 杀死所有正在运行的容器
#docker rm $(docker ps -a -q) 删除所有已经停止的容器

$docker exec [参数] [contain] [command] #在容器中执行命令
# -d 以守护进程方式运行（后台）
# -i 以交互模式运行容器，通常与 -t 同时使用
# -t 为容器重新分配一个伪输入终端，通常与 -i 同时使用

$docker attach [contain] #进入容器
#docker exec -it [contain] /bin/sh 也可以进入容器 前提是容器是运行中的

$docker top [contain] #查看容器中运行的进程

$docker diff [contain] #查看容器中的变化

$docker inspect [contain] #查看容器详细信息（输出为Json）

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;docker-hub&quot;&gt;Docker Hub&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$docker login #登陆dockerHub

$docker commit -m=&quot;版本信息&quot; --author=&quot;作者&quot; [contain] [REPOSITORY:TAG] #构建镜像

$docker push [REPOSITORY:TAG] #将镜像推到dockerhub
#REPOSITORY 格式要求 user/repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;构建docker 镜像的常用方法是通过Dockerfile，这个以后有空再填这个坑&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018/Docker/alpine.png&quot; alt=&quot;alpine&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Alpine 最小的linux镜像&lt;/center&gt;

</description>
        <pubDate>Thu, 22 Mar 2018 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/Outside-man.github.io/2018/03/22/docker/</link>
        <guid isPermaLink="true">http://localhost:4000/Outside-man.github.io/2018/03/22/docker/</guid>
        
        <category>docker</category>
        
        <category>技术</category>
        
        
      </item>
    
      <item>
        <title>D2·乘风</title>
        <description>&lt;p&gt;去年没去成阿里的 &lt;strong&gt;初心·D2前端开发者大会&lt;/strong&gt;，想来可能是我的参会理由的问题，写自己是后端，是学习前端技能，可能被人认为是非前端不适合参会吧。今年这次报名写了自己投了阿里，想了解下阿里技术文化，然后就很顺利当天晚上就收到回复短信了。&lt;/p&gt;

&lt;p&gt;带着β-house的学弟一起去了阿里西溪园区，听去年去的学弟说，初心那场有好几个展厅，这次只有一个展厅。诶 去年没去成还是遗憾啊。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018/D2-Developer/Alibaba.jpg&quot; alt=&quot;阿里西溪园区&quot; /&gt;&lt;/p&gt;
&lt;center&gt;阿里西溪园区&lt;/center&gt;

&lt;p&gt;到了签到处，居然遇到了第三届工作室的学姐，学姐真的很漂亮。也遇到了其他三个学长，哇 各个都是人才，说话又好听。还蹭了一顿学长们的午饭，爽到。
&lt;img src=&quot;/img/in-post/2018/D2-Developer/betahouse.jpg&quot; alt=&quot;学姐&quot; /&gt;&lt;/p&gt;
&lt;center&gt;我们与学姐 左二是我:)&lt;/center&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/2018/D2-Developer/senior.jpg&quot; alt=&quot;学长学姐们&quot; /&gt;&lt;/p&gt;
&lt;center&gt;学长学姐们&lt;/center&gt;

&lt;p&gt;这次开发者大会，真的是完全 &lt;em&gt;to D&lt;/em&gt;的，从钉钉，到支付宝小程序开发，淘宝无线店ISV，阿里云的前端监控等等。&lt;/p&gt;

&lt;p&gt;最让我感兴趣的是DataV的数据可视化，茶歇的时候和展台的人沟通了，因为之前有项目里使用过百度的Echarts，DataV在我的理解中是有点集众家之长，他作为一个包容性的框架，可以支持各种可视图表，开发部署更快。最亮眼的是他支持市场，开发者可以自行整合或者开发出一套可视化框架，放到DataV的市场中，可以供其他开发者使用。因为之前做过停车场可视化项目，会出现前端性能吃紧，就这个我也和展台小姐姐私下聊了下，她说基本能吃的下这样的数据变化的。
&lt;img src=&quot;/img/in-post/2018/D2-Developer/DataV.png&quot; alt=&quot;DataV&quot; /&gt;&lt;/p&gt;
&lt;center&gt;DataV&lt;/center&gt;

&lt;p&gt;这一天的开发者大会下来，最大的感受就是自己能力还远远不够，同时发现了之前的学长学姐们是那么厉害，自己已经大三的如果还这样慢慢学，肯定是要跟不上了。还有一种感觉就是前端真的好有意思，打算开始学习一个前端。&lt;/p&gt;

&lt;p&gt;也是今天确定了自己的花名 —— &lt;strong&gt;语海&lt;/strong&gt;。
一直呆在大学象牙塔里面，感觉自己能独立搞点玩具项目，自我感觉还可以，来到D2，看到了自己的前辈们，才发现自己真的是大学里的井底之蛙。井底之蛙不可语之海者，我要走出自己的井，看看大世界，成为能语海的人。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;乘风，乘风快哉&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 18 Mar 2018 05:00:00 +0800</pubDate>
        <link>http://localhost:4000/Outside-man.github.io/2018/03/18/D2-developer/</link>
        <guid isPermaLink="true">http://localhost:4000/Outside-man.github.io/2018/03/18/D2-developer/</guid>
        
        <category>技术</category>
        
        
      </item>
    
      <item>
        <title>为何要仰望星空</title>
        <description>&lt;p&gt;今天朋友圈直接被刷爆了，一颗物理界的巨星霍金逝世了。霍金对于我来说并不是很熟悉，以前初中中二的时候，啃过时间简史，也就是度过，套着里面一些生涩难懂的词汇，和初中的小伙伴侃侃大山。当我得知霍金逝世的时候，内心中还是怀着一定的伤感，白驹过隙，霍金致力于研究时间的，穷极一生证明时间的起点，到最后也还是阻挡不了时间无情地碾过。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018/Hwaking/hwaking.jpg&quot; alt=&quot;Hwaking&quot; /&gt;&lt;/p&gt;
&lt;center&gt;霍金&lt;/center&gt;

&lt;p&gt;仔细了解霍金是从《万物理论》里面知道了霍金的人生，他这一生都被上帝玩弄着，有着极高的天赋和思想，却在早年就患上了肌肉萎缩的绝症，到后患肺炎，手术后他失去了说话的能力。他失去行动能力，甚至没有可以表达的能力。但是这一切都没有停止他的思维，只要大脑还能运作，思想就永无止步。&lt;/p&gt;

&lt;p&gt;对于物理我不甚了解，对于霍金的讣告，更多是他的一生的追求对我的触动。现在的我也面临着各种困难，我尚能行动，尚能表述，为何我会停下步伐。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;center style=&quot;font-style:oblique&quot;&gt;-为何要仰望星空&lt;/center&gt;
&lt;center style=&quot;font-style:oblique&quot;&gt;-因为大地在我的脚下&lt;/center&gt;
</description>
        <pubDate>Wed, 14 Mar 2018 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/Outside-man.github.io/2018/03/14/Hawking/</link>
        <guid isPermaLink="true">http://localhost:4000/Outside-man.github.io/2018/03/14/Hawking/</guid>
        
        <category>生活</category>
        
        <category>霍金</category>
        
        
      </item>
    
      <item>
        <title>一次Redis被攻击的体验</title>
        <description>&lt;p&gt;今天本来高高兴兴地在开发项目，当我打开redis远程管理的时候突然发现，数据库中多了两条奇怪的数据。
&lt;img src=&quot;/img/in-post/2018/Redis-Attack/n1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;center&gt;n1&lt;/center&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/2018/Redis-Attack/n2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;center&gt;n2&lt;/center&gt;

&lt;p&gt;我当时就发现这个ip我不认识啊，而且这个明显是cron的定时脚本，我心想不会是我开发的时候不小心把一些什么奇奇怪怪的东西写到redis里了吧。但是我的项目缓存没有持久的，这个TTL:-1让我觉得十分奇怪。&lt;/p&gt;

&lt;p&gt;抱着好奇，我把这个ip查一了一下 是加拿大的服务器。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018/Redis-Attack/ip.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;center&gt;百度结果&lt;/center&gt;

&lt;p&gt;我心想我一个阿里云的学生服务器，我也没往墙外走过，这个肯定不是我主动造成。接着我尝试直接访问这个地址，看到的结果令我大吃一惊。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018/Redis-Attack/db.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;center&gt;db.php&lt;/center&gt;
&lt;p&gt;这是shell脚本啊，我被攻击了。&lt;/p&gt;

&lt;p&gt;一直听闻网络黑客神乎其神，但是长在红旗下的我还真没怎么一对一遇到过黑客攻击，这一波我要仔细瞅瞅。问了一下专攻安全的学弟，才知道这个黑客的手段。&lt;/p&gt;

&lt;p&gt;大概攻击手段如下&lt;/p&gt;

&lt;p&gt;由于弱口令进入redis
本地生成公私钥文件，把公钥文件通过redis &amp;gt;config set 注到我的服务器中
通过本地私钥 ssh –i id_rsa root@xxx.xxx.xx.xx 直接获取服务器
不重视网络安全，活该被攻击，还好这台服务器只是我测试用的，最后解决办法，找到这段rsa删除，redis密码加强。仔细分析代码还被执行了”sr0.db”脚本，有可能是后门脚本。以后只能悠着点了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018/Redis-Attack/bqb.jpg&quot; alt=&quot;&quot; /&gt;
技术参考：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.knownsec.com/2015/11/analysis-of-redis-unauthorized-of-expolit/&quot;&gt;Redis 未授权访问配合 SSH key 文件利用分析&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Mar 2018 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/Outside-man.github.io/2018/03/05/Redis-Attack/</link>
        <guid isPermaLink="true">http://localhost:4000/Outside-man.github.io/2018/03/05/Redis-Attack/</guid>
        
        <category>网络安全</category>
        
        <category>服务器</category>
        
        <category>Redis</category>
        
        
      </item>
    
      <item>
        <title>有些人错过了，就是一辈子</title>
        <description>&lt;p&gt;今天看完《前任3》，影片开始还在吐槽剧情，看似分手，实则塞了观众满嘴口粮。一开场的，林佳来回进出房间，孟云在客厅坐立不安。发生的一切都好像是在说，这只是小打小闹，最终一定会和好的。&lt;/p&gt;

&lt;p&gt;王鑫，王梓的出现为最后的无法挽回打下了伏笔。作为观众能理解是误会，剧中的男女主却越走越远。&lt;/p&gt;

&lt;p&gt;在王梓知道孟云还想着林佳，把自己当做的替代品，却仍希望孟云能挽留自己。希望孟云能说出　
&lt;strong&gt;我爱你&lt;/strong&gt;，此时的孟云最可能说的是　&lt;strong&gt;对不起&lt;/strong&gt;，实在是放不下林佳。而林佳线中，面对王鑫的无限温柔之下，她一开始也是无法放下孟云。影片一直给观众呈现的感觉就是最终他们一定能复合。&lt;/p&gt;

&lt;p&gt;剧中有无数次可以复合的机会，一次次的失去。早些时候年轻的时候想着的是怎么这么矫情，现在渐渐也能感受到造物弄人的感觉。最终一对5年的恋人分开了，林佳最终再见的方式是狂吃会过敏的芒果，孟云则是穿上至尊宝站在城市街头。一段感情从此彻底断开，这突然起来的，真的是令人心里堵着。多希望其实影片还有5分钟，这一切都能复合。&lt;/p&gt;

&lt;p&gt;男女主错了吗？他们中没有人错，感情的事情没有对与错。热恋的时候永远不知道会因为什么分开，走着走着可能就分开了。就像剧中，开始问为什么分手，记不清了。却一直一直放不下，但也一直一直无法复合。&lt;/p&gt;

&lt;p&gt;整部剧表现形式虽然夸张，但是分手之后的那种情绪波动，非常能引起观众的共鸣。自己何尝也不是在经历一段感情之后，久久走不出来呢。或许是1个月或许是1年，或许是更久。&lt;/p&gt;

&lt;p&gt;珍惜眼前人，且行且珍惜。有些人错过了，就是一辈子。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018/Ex-file/end.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Jan 2018 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/Outside-man.github.io/2018/01/02/The-Ex-file/</link>
        <guid isPermaLink="true">http://localhost:4000/Outside-man.github.io/2018/01/02/The-Ex-file/</guid>
        
        <category>生活</category>
        
        <category>影评</category>
        
        <category>前任3：再见前任</category>
        
        
      </item>
    
      <item>
        <title>minecraft开服实录</title>
        <description>&lt;h3 id=&quot;写在前面&quot;&gt;写在前面&lt;/h3&gt;
&lt;p&gt;Minecraft(简称Mc) 是一款从中学一直玩到大学都觉得非常好玩的游戏&lt;br /&gt;
但是以前和小伙伴玩的时候是通过蛤蟆吃或者是本地建服然后端口开放出去。这些方法都是中学的时候一点点看着论坛摸索出来的。之后进了大学就都是在寝室里局域网play。&lt;br /&gt;
这次有机会搞到了一台还不错的ubuntu的服务器，打算在上面建个服，然后放假了大家可以在家里玩。但是再liunx的服务器上，没有图形化界面 开服就没那么容易，就参考着资料试试看。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;需要材料&quot;&gt;需要材料&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;jdk&lt;/li&gt;
  &lt;li&gt;minecraft_server.jar&lt;/li&gt;
  &lt;li&gt;forge-install.jar&lt;/li&gt;
  &lt;li&gt;forge-universal.jar&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;搞起以1710为例&quot;&gt;搞起(以1.7.10为例)&lt;/h3&gt;
&lt;p&gt;java环境就不多说了。直接创个目录就把上面三个jar丢进去。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -Xmx2048M -Xms2048M -XX:ParallelGCThreads=16 -jar minecraft_server.1.7.10.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;-Xmx最大内存 -Xms最小内存 -XX:ParallelGCThreads同时调用CPU数量，建议不设&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;第一次运行的时候 会要求签署EULA文件。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eula=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;再次运行，这个时候一个&lt;strong&gt;纯净服务器&lt;/strong&gt;就开起来了。&lt;/p&gt;
&lt;h4 id=&quot;forge&quot;&gt;Forge&lt;/h4&gt;
&lt;p&gt;如果没有forge-install.jar、forge-universal.jar那就wget&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://files.minecraftforge.net/maven/net/minecraftforge/forge/1.7.10-10.13.2.1291/forge-1.7.10-10.13.2.1291-installer.jar
wget http://files.minecraftforge.net/maven/net/minecraftforge/forge/1.7.10-10.13.2.1291/forge-1.7.10-10.13.2.1291-universal.jar

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;有了之后就开始安装forge&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -jar forge-1.7.10-10.13.2.1291-installer.jar nogui --installServer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;同目录下必须有minecraft_server.1.7.10.jar，注意版本号&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;启动forge服务器&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -jar forge-1.7.10-10.13.2.1291-universal.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以装mod的服务器就配置好了（撒花&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;如果是盗版服的话 修改server.properties 里的 online-mode=false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;还有一点点&quot;&gt;还有一点点&lt;/h4&gt;
&lt;p&gt;这个时候在目录下面有两个jar(forge-install.jar安装完毕后就可以删除了),强迫症不能忍啊，整到一个jar里面&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir tmp
cd tmp
tmp ../minecraft_server.1.7.10.jar
tmp ../forge-1.7.10-10.13.2.1291-universal.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Archive: ../forge-1.7.10-10.13.2.1291-universal.jar &lt;br /&gt;
replace META-INF/MANIFEST.MF? [y]es, [n]o, [A]ll, [N]one, [r]ename: A&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zip -r ../Forge-minecraft_server.1.7.10.jar *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样的话可以就把server和forge里的东西整一块,把tmp文件夹以及之前的jar删除即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;完成之后的文件树

tree -L 1

├── banned-ips.json
├── banned-players.json
├── config
├── eula.txt
├── Forge-minecraft_server.1.7.10.jar
├── libraries
├── logs
├── mods
├── ops.json
├── server.properties
├── usercache.json
├── whitelist.json
└── world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;打上mod，开始Mc之旅吧~&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nohup java -Xmx2048M -Xms2048M -XX:ParallelGCThreads=16 -jar minecraft_server.1.7.10.jar &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 22 Dec 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/Outside-man.github.io/2017/12/22/minecraft-server/</link>
        <guid isPermaLink="true">http://localhost:4000/Outside-man.github.io/2017/12/22/minecraft-server/</guid>
        
        <category>minecraft</category>
        
        
      </item>
    
  </channel>
</rss>
